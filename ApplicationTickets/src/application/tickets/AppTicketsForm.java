package application.tickets;

import crypto.utilities.CryptoUtilities;
import db.airport.models.Flight;
import db.airport.models.Passenger;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Map;
import javax.crypto.SecretKey;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import requestresponse.impl.PAYP.RequestPAYP;
import requestresponse.impl.PAYP.ResponsePAYP;
import requestresponse.impl.TICKMAP.RequestTICKMAP;
import requestresponse.impl.TICKMAP.ResponseTICKMAP;
import requestresponse.multithread.abstracts.AbstractApplicationForm;

/**
 *
 * @author Morgan
 */
public class AppTicketsForm extends AbstractApplicationForm {

//<editor-fold defaultstate="collapsed" desc="Variables">
	//Crypto
	private final char[] pwd = "azerty".toCharArray();
	private final String aliasTick = "SerTick";
	private final String aliasPay = "SerPay";
	private final String asymetricAlgorithm = "RSA/ECB/PKCS1Padding";
	private final String symetricGenAlgorithm = "DES";
	private final String symetricAlgorithm = "DES/ECB/PKCS5Padding";
	private final String signAlgorithm = "SHA1withRSA";
	private SecretKey hmacSecretKey, cryptSecretKey;
	private final String ksFileName;
	//Dialogs
	private PassengerInformationDialog passengerDialog;
	private PaymentInformationDialog payDialog;
	//PAYP
	private final String ipAddrPay;
	private final int portPay;
	//
	private LinkedHashMap<Flight, Integer> mapFlights = null;
	private ArrayList<Flight> listFlights;
	private int idFlight, nbPassengers;
	private Passenger p;
	private float price;
	private String cardNumber, ownerName;
//</editor-fold>

	/**
	 * Creates new form AppTicketsForm
	 */
	public AppTicketsForm() {
		super("apptickets.properties", true);
		initComponents();

		ksFileName = System.getProperty("user.dir")
			+ System.getProperty("file.separator") + "ksAppTick";
		if (!doHandshake()) System.exit(1);
		else getFlightList();

		//Sets the HOST & PORT for server_payment
		ipAddrPay = properties.getProperty("HOST_PAYMENT");
		portPay = Integer.parseInt(properties.getProperty("PORT_PAYMENT"));
	}

	//<editor-fold defaultstate="collapsed" desc="Setters">
	/**
	 * package accessible
	 *
	 * @param p
	 */
	void setPassenger(Passenger p) {
		this.p = p;
	}

	/**
	 * package acccessible
	 *
	 * @param nb
	 */
	void setNbPassengers(int nb) {
		this.nbPassengers = nb;
	}

	/**
	 * package accessible
	 *
	 * @param cardNumber
	 */
	void setCardNumber(String cardNumber) {
		this.cardNumber = cardNumber;
	}

	/**
	 * package accessible
	 *
	 * @param ownerName
	 */
	void setOwnerName(String ownerName) {
		this.ownerName = ownerName;
	}
	//</editor-fold>

	/**
	 * This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        flightListLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightList = new javax.swing.JList<>();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        flightListLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        flightListLabel.setText("Liste des vols : ");

        flightList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        flightList.setEnabled(false);
        flightList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flightListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(flightList);

        refreshButton.setText("Raffrachir");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(flightListLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(flightListLabel)
                    .addComponent(refreshButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	//<editor-fold defaultstate="collapsed" desc="TICKMAP">
	/**
	 *
	 * @return
	 */
	private boolean doHandshake() {
		//Generate symetric keys
		hmacSecretKey = CryptoUtilities.generateSecretKey(symetricGenAlgorithm);
		cryptSecretKey = CryptoUtilities.generateSecretKey(symetricGenAlgorithm);
		//get server public key from certificate
		PublicKey pk = CryptoUtilities.getPublicKeyfromKeystoreCertificate(ksFileName, pwd, aliasTick);
		//wrap secret keys
		byte[] wrapKeyHmac = CryptoUtilities.wrapKey(asymetricAlgorithm, pk, hmacSecretKey);
		byte[] wrapKeyCrypt = CryptoUtilities.wrapKey(asymetricAlgorithm, pk, cryptSecretKey);
		//send keys to server
		Object cu[] = {wrapKeyHmac, wrapKeyCrypt};
		ResponseTICKMAP res = (ResponseTICKMAP) connectToServer(
			new RequestTICKMAP(RequestTICKMAP.HANDSHAKE, cu));
		if (res != null) {
			if (res.getCode() == ResponseTICKMAP.HANDSHAKE_OK) return true;
			else JOptionPane.showMessageDialog(this, res.getChargeUtile(),
					"Erreur", JOptionPane.ERROR_MESSAGE);
		}
		return false;
	}

	/**
	 *
	 */
	private void getFlightList() {
		ResponseTICKMAP res = (ResponseTICKMAP) connectToServer(
			new RequestTICKMAP(RequestTICKMAP.GET_FLIGHTS, ""));
		if (res != null) {
			if (res.getCode() == ResponseTICKMAP.GET_FLIGHTS_FAIL)
				JOptionPane.showMessageDialog(this, res.getChargeUtile(),
					"Erreur", JOptionPane.ERROR_MESSAGE);
			else {
				mapFlights = (LinkedHashMap<Flight, Integer>) res.getChargeUtile();
				if (mapFlights == null)
					JOptionPane.showMessageDialog(this,
						"Pas de vol pour les 7 prochains jours", "Info", JOptionPane.INFORMATION_MESSAGE);
				else {
					listFlights = new ArrayList<>();
					DefaultListModel<String> dlm = new DefaultListModel<>();
					for (Map.Entry<Flight, Integer> entry : mapFlights.entrySet()) {
						Flight flight = entry.getKey();
						listFlights.add(flight);
						dlm.addElement(flight.getDepartureDate() + " - " + flight
							+ " - Sièges disponibles : " + entry.getValue());
					}
					flightList.setModel(dlm);
					flightList.setSelectedIndex(-1);
					flightList.setEnabled(true);
				}
			}
		}
	}

	/**
	 *
	 * @param evt
	 */
    private void flightListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flightListMouseClicked
		if (evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount() > 1) {
			if (flightList.getSelectedIndex() != -1) {
				Flight f = listFlights.get(flightList.getSelectedIndex());
				ResponseTICKMAP res = (ResponseTICKMAP) connectToServer(
					new RequestTICKMAP(RequestTICKMAP.CHOOSE_FLIGHT, f.getId()));
				if (res != null && res.getCode() == ResponseTICKMAP.CHOOSE_FLIGHT_OK) {
					idFlight = f.getId();
					passengerDialog = new PassengerInformationDialog(this, f.toString(),
						true, (ArrayList<Passenger>) res.getChargeUtile());
					passengerDialog.setLocationRelativeTo(this);
					passengerDialog.addWindowListener(new WindowAdapter() {
						@Override
						public void windowClosed(java.awt.event.WindowEvent event) {
							System.out.println(".windowClosed()");
							sendHoldTickets();
						}
					});
					passengerDialog.setVisible(true);
				} else
					JOptionPane.showMessageDialog(this,
						"Erreur lors de la récupération des bagages", "Erreur",
						JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_flightListMouseClicked

	/**
	 *
	 */
	private void sendHoldTickets() {
		if (p != null) {
			Object cu[] = {idFlight, nbPassengers, p};
			byte[] symetricCrypt = CryptoUtilities.symmetricEncryption(cu, symetricAlgorithm, cryptSecretKey);
			ResponseTICKMAP res = (ResponseTICKMAP) connectToServer(
				new RequestTICKMAP(RequestTICKMAP.HOLD_TICKETS, symetricCrypt));
			if (res != null) {
				if (res.getCode() == ResponseTICKMAP.HOLD_TICKETS_FAIL)
					JOptionPane.showMessageDialog(this, res.getChargeUtile(),
						"Erreur", JOptionPane.ERROR_MESSAGE);
				else {
					byte[] cryptedCU = (byte[]) res.getChargeUtile();
					Object rcv[] = (Object[]) CryptoUtilities.symmetricDecryption(
						cryptedCU, symetricAlgorithm, cryptSecretKey);
					price = (float) rcv[0];
					DecimalFormat df = new DecimalFormat();
					df.setMaximumFractionDigits(2);
					String msg = "Le prix à payer pour les " + nbPassengers
						+ " places est de " + df.format(price) + "€. Etes-vous d'accord ?";
					sendConfirmTickets(JOptionPane.showConfirmDialog(this, msg,
						"Confirmer les billets", JOptionPane.YES_NO_OPTION,
						JOptionPane.QUESTION_MESSAGE));
				}
			}
			p = null;
		}
	}

	/**
	 *
	 * @param confirm
	 */
	private void sendConfirmTickets(int confirm) {
		boolean ok = false;
		if (confirm == JOptionPane.YES_OPTION)
			ok = true;
		Object toSend[] = {ok, idFlight, p.getId()};
		byte[] hmac = CryptoUtilities.makeHMAC(toSend, hmacSecretKey);
		Object cu[] = {toSend, hmac};
		ResponseTICKMAP res = (ResponseTICKMAP) connectToServer(
			new RequestTICKMAP(RequestTICKMAP.CONFIRM_TICKETS, cu));
		if (res != null) {
			switch (res.getCode()) {
				case ResponseTICKMAP.CONFIRM_TICKETS_FAIL:
					JOptionPane.showMessageDialog(this, res.getChargeUtile(),
						"Erreur", JOptionPane.ERROR_MESSAGE);
					break;
				case ResponseTICKMAP.CONFIRM_TICKETS_NO_OK:
					JOptionPane.showMessageDialog(this, "Billets supprimé",
						"Info", JOptionPane.INFORMATION_MESSAGE);
					break;
				case ResponseTICKMAP.CONFIRM_TICKETS_YES_OK:
					sendConfirmPayment(makePayment());
					break;
			}
		}
	}

	/**
	 *
	 * @param ok
	 */
	private void sendConfirmPayment(boolean ok) {
		Object toSend[] = {ok, idFlight, p.getId()};
		byte[] hmac = CryptoUtilities.makeHMAC(toSend, hmacSecretKey);
		Object cu[] = {toSend, hmac};
		ResponseTICKMAP res = (ResponseTICKMAP) connectToServer(
			new RequestTICKMAP(RequestTICKMAP.CONFIRM_PAYMENT, cu));
		if (res != null) {
			switch (res.getCode()) {
				case ResponseTICKMAP.CONFIRM_PAYMENT_FAIL:
					JOptionPane.showMessageDialog(this, res.getChargeUtile(),
						"Erreur", JOptionPane.ERROR_MESSAGE);
					break;
				case ResponseTICKMAP.CONFIRM_PAYMENT_NO_OK:
					JOptionPane.showMessageDialog(this, "Billets supprimé",
						"Info", JOptionPane.INFORMATION_MESSAGE);
					break;
				case ResponseTICKMAP.CONFIRM_PAYMENT_YES_OK:
					JOptionPane.showMessageDialog(this,
						"Paiement confirmé - réservation terminée", "Info",
						JOptionPane.INFORMATION_MESSAGE);
					break;
				default:
					break;
			}
		}
	}
	//</editor-fold>

	/**
	 *
	 * @param evt
	 */
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
		getFlightList();
    }//GEN-LAST:event_refreshButtonActionPerformed

	//<editor-fold defaultstate="collapsed" desc="PAYP">
	/**
	 *
	 * @return
	 */
	private boolean makePayment() {
		payDialog = new PaymentInformationDialog(this, "Informations de paiement", true, price);
		payDialog.setLocationRelativeTo(this);
		payDialog.setVisible(true);

		if ("".equals(cardNumber) || "".equals(ownerName)) System.err.println("Oups!!!!");
		else {
			PublicKey pk = CryptoUtilities
				.getPublicKeyfromKeystoreCertificate(ksFileName, pwd, aliasPay);
			byte[] cryptedCardNumber = CryptoUtilities
				.asymmetricEncryption(cardNumber, asymetricAlgorithm, pk);
			Object toSign[] = {cryptedCardNumber, ownerName, price, userCertificate};
			System.out.println("Debug : " + userCertificate);
			PrivateKey prk = CryptoUtilities
				.getPrivateKeyFromKeystore(ksFileName, pwd, userCertificate);
			byte[] sign = CryptoUtilities.sign(toSign, signAlgorithm, prk);
			Object cu[] = {toSign, sign};
			ResponsePAYP res = connectToServerPayment(
				new RequestPAYP(RequestPAYP.MAKE_PAYMENT, cu));
			if (res != null) return res.getCode() == ResponsePAYP.MAKE_PAYMENT_OK;
		}
		return false;
	}

	/**
	 *
	 * @param req
	 *
	 * @return
	 */
	private ResponsePAYP connectToServerPayment(RequestPAYP req) {
		ResponsePAYP res = null;
		//Connection to the server
		try (Socket paymentSocket = new Socket(ipAddrPay, portPay)) {
			//Send request
			ObjectOutputStream outputStream = new ObjectOutputStream(paymentSocket.getOutputStream());
			outputStream.writeObject(req);
			outputStream.flush();
			//Read response
			try (ObjectInputStream inputStream
				= new ObjectInputStream(paymentSocket.getInputStream())) {
				res = (ResponsePAYP) inputStream.readObject();
			}
		} catch (NumberFormatException e) {
			System.err.println("Number Format Error : " + e.getMessage());
		} catch (IOException e) {
			System.err.println("IO Error : " + e.getMessage());
		} catch (ClassNotFoundException ex) {
			System.err.println("Receive Error - ClassNotFound : " + ex.getMessage());
		}
		return res;
	}
	//</editor-fold>

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(AppTicketsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(AppTicketsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(AppTicketsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(AppTicketsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				AppTicketsForm atf = new AppTicketsForm();
				atf.setLocationRelativeTo(null);
				atf.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> flightList;
    private javax.swing.JLabel flightListLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
}
