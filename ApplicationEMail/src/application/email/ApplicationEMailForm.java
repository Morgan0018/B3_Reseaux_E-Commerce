package application.email;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.StringTokenizer;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.*;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * @author Morgan
 */
public class ApplicationEMailForm extends javax.swing.JFrame {

	//<editor-fold defaultstate="collapsed" desc="Variables">
	private final Properties prop;
	private static final String encoding = "iso-8859-1";
	private String sender, user, pwd, protocol, host, dest, sujet, contenu;
	private Session sess;
	private Store store;
	private Folder f;
	private Message messages[];
	private File selectedFiles[];
	private int nbMsg;
	private final ReloadThread rt;
	//</editor-fold>

	/**
	 * Creates new form ApplicationMailForm
	 */
	public ApplicationEMailForm() {
		this.nbMsg = 0;
		initComponents();
		prop = System.getProperties();
		prop.put("file.encoding", encoding);
		prop.put("mail.pop3.disable.top", true);
		protocol = "pop3";

		rt = new ReloadThread(this);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuButtonGroup = new javax.swing.ButtonGroup();
        AccountFrame = new javax.swing.JFrame();
        chooseLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        AddressTF = new javax.swing.JTextField();
        pwdLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        PasswordField = new javax.swing.JPasswordField();
        MainTabbedPane = new javax.swing.JTabbedPane();
        InboxPanel = new javax.swing.JPanel();
        listScrollPane = new javax.swing.JScrollPane();
        MsgList = new javax.swing.JList<>();
        readMsgPanel = new javax.swing.JPanel();
        deLabel = new javax.swing.JLabel();
        senderLabel = new javax.swing.JLabel();
        leLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        sujetLabel2 = new javax.swing.JLabel();
        subjectLabel = new javax.swing.JLabel();
        attLabel = new javax.swing.JLabel();
        joinLabel = new javax.swing.JLabel();
        downloadButton = new javax.swing.JButton();
        taScrollPane = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        deleteButton = new javax.swing.JButton();
        reloadButton = new javax.swing.JButton();
        newMsgLabel = new javax.swing.JLabel();
        NewMsgPanel = new javax.swing.JPanel();
        rcptLabel = new javax.swing.JLabel();
        rcptTF = new javax.swing.JTextField();
        sujetLabel = new javax.swing.JLabel();
        sujetTF = new javax.swing.JTextField();
        attachLabel = new javax.swing.JLabel();
        attachButton = new javax.swing.JButton();
        attachNameLabel = new javax.swing.JLabel();
        contentLabel = new javax.swing.JLabel();
        ScrollPane = new javax.swing.JScrollPane();
        contentTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        SettingsMenu = new javax.swing.JMenu();
        AccountMenuItem = new javax.swing.JMenuItem();
        ProtocolMenu = new javax.swing.JMenu();
        pop3RadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();
        imapRadioButtonMenuItem = new javax.swing.JRadioButtonMenuItem();

        AccountFrame.setTitle("Compte");
        AccountFrame.setMinimumSize(new java.awt.Dimension(356, 170));
        AccountFrame.setResizable(false);

        chooseLabel.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        chooseLabel.setText("Choisissez le compte que vous désirez utiliser : ");

        addressLabel.setText("Adresse : ");

        AddressTF.setText("monnom@monprovider.qqc");

        pwdLabel.setText("Mot de passe : ");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        PasswordField.setText("jPasswordField1");

        javax.swing.GroupLayout AccountFrameLayout = new javax.swing.GroupLayout(AccountFrame.getContentPane());
        AccountFrame.getContentPane().setLayout(AccountFrameLayout);
        AccountFrameLayout.setHorizontalGroup(
            AccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AccountFrameLayout.createSequentialGroup()
                        .addComponent(chooseLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(AccountFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(AccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AccountFrameLayout.createSequentialGroup()
                                .addComponent(addressLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AddressTF))
                            .addGroup(AccountFrameLayout.createSequentialGroup()
                                .addComponent(pwdLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PasswordField)))))
                .addContainerGap())
            .addGroup(AccountFrameLayout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AccountFrameLayout.setVerticalGroup(
            AccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AccountFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chooseLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressLabel)
                    .addComponent(AddressTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(AccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwdLabel)
                    .addComponent(PasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okButton)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        MsgList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                MsgListValueChanged(evt);
            }
        });
        listScrollPane.setViewportView(MsgList);

        deLabel.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        deLabel.setText("De : ");

        senderLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        leLabel.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        leLabel.setText("Le : ");

        dateLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        sujetLabel2.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        sujetLabel2.setText("Sujet : ");

        subjectLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 51, 51)));

        attLabel.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        attLabel.setText("Pièce jointes : ");

        downloadButton.setText("Télécharger");
        downloadButton.setEnabled(false);
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        TextArea.setColumns(20);
        TextArea.setRows(5);
        TextArea.setEnabled(false);
        taScrollPane.setViewportView(TextArea);

        javax.swing.GroupLayout readMsgPanelLayout = new javax.swing.GroupLayout(readMsgPanel);
        readMsgPanel.setLayout(readMsgPanelLayout);
        readMsgPanelLayout.setHorizontalGroup(
            readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readMsgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taScrollPane)
                    .addGroup(readMsgPanelLayout.createSequentialGroup()
                        .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sujetLabel2)
                            .addComponent(attLabel)
                            .addComponent(deLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(readMsgPanelLayout.createSequentialGroup()
                                .addComponent(downloadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(joinLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(subjectLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(readMsgPanelLayout.createSequentialGroup()
                                .addComponent(senderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(leLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        readMsgPanelLayout.setVerticalGroup(
            readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(readMsgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(deLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(senderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(leLabel)
                        .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sujetLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(subjectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(joinLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(readMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(attLabel)
                        .addComponent(downloadButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                .addContainerGap())
        );

        deleteButton.setText("Supprimer");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        reloadButton.setText("Recharger");
        reloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InboxPanelLayout = new javax.swing.GroupLayout(InboxPanel);
        InboxPanel.setLayout(InboxPanelLayout);
        InboxPanelLayout.setHorizontalGroup(
            InboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(listScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addGroup(InboxPanelLayout.createSequentialGroup()
                        .addComponent(reloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newMsgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(readMsgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        InboxPanelLayout.setVerticalGroup(
            InboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InboxPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(readMsgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(InboxPanelLayout.createSequentialGroup()
                        .addGroup(InboxPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reloadButton)
                            .addComponent(newMsgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)))
                .addContainerGap())
        );

        MainTabbedPane.addTab("Boite de réception", InboxPanel);

        rcptLabel.setText("Destinataire :");

        sujetLabel.setText("Sujet : ");

        attachLabel.setText("Pièce(s) jointe(s) ?");

        attachButton.setText("Joindre");
        attachButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachButtonActionPerformed(evt);
            }
        });

        contentLabel.setText("Contenu:");

        contentTextArea.setColumns(20);
        contentTextArea.setRows(5);
        ScrollPane.setViewportView(contentTextArea);

        sendButton.setText("Envoyer");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NewMsgPanelLayout = new javax.swing.GroupLayout(NewMsgPanel);
        NewMsgPanel.setLayout(NewMsgPanelLayout);
        NewMsgPanelLayout.setHorizontalGroup(
            NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NewMsgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(NewMsgPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NewMsgPanelLayout.createSequentialGroup()
                        .addGroup(NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sujetLabel)
                            .addComponent(attachLabel)
                            .addComponent(rcptLabel)
                            .addComponent(contentLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sujetTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rcptTF, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, NewMsgPanelLayout.createSequentialGroup()
                                .addComponent(attachButton, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(attachNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(ScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 778, Short.MAX_VALUE))))
                .addContainerGap())
        );
        NewMsgPanelLayout.setVerticalGroup(
            NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NewMsgPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcptTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rcptLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sujetLabel)
                    .addComponent(sujetTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(attachLabel)
                    .addComponent(attachButton)
                    .addComponent(attachNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(NewMsgPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NewMsgPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(NewMsgPanelLayout.createSequentialGroup()
                        .addComponent(contentLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendButton)
                .addContainerGap())
        );

        MainTabbedPane.addTab("Nouveau message", NewMsgPanel);

        MenuBar.setBorderPainted(false);

        SettingsMenu.setText("Préférences");

        AccountMenuItem.setText("Changer de compte");
        AccountMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccountMenuItemActionPerformed(evt);
            }
        });
        SettingsMenu.add(AccountMenuItem);

        ProtocolMenu.setText("Protocole de retrait");

        menuButtonGroup.add(pop3RadioButtonMenuItem);
        pop3RadioButtonMenuItem.setSelected(true);
        pop3RadioButtonMenuItem.setText("Pop3");
        pop3RadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pop3RadioButtonMenuItemActionPerformed(evt);
            }
        });
        ProtocolMenu.add(pop3RadioButtonMenuItem);

        menuButtonGroup.add(imapRadioButtonMenuItem);
        imapRadioButtonMenuItem.setText("IMAP");
        imapRadioButtonMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imapRadioButtonMenuItemActionPerformed(evt);
            }
        });
        ProtocolMenu.add(imapRadioButtonMenuItem);

        SettingsMenu.add(ProtocolMenu);

        MenuBar.add(SettingsMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainTabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 *
	 */
	private void loadMessages() {
		int nbNewMsg;
		try {
			System.out.println("Obtention d'un objet store");
			store = sess.getStore(protocol);
			store.connect(host, user, pwd);

			System.out.println("Obtention d'un objet folder");
			f = store.getFolder("INBOX");
			f.open(Folder.READ_WRITE);

			System.out.println("Obtention des messages");
			nbNewMsg = f.getMessageCount() - nbMsg;
			newMsgLabel.setText(nbNewMsg + " nouveau(x)");
			nbMsg = f.getMessageCount();
			System.out.println("Nombre de messages : " + nbMsg);

			messages = f.getMessages();
			DefaultListModel<String> dlm = new DefaultListModel<>();
			if (nbMsg == 0) {
				dlm.addElement("Aucun message");
			} else {
				for (int i = 0; i < messages.length; i++) {
					System.out.println("Message n° " + (i));
					if (messages[i].getFrom() != null)
						for (Address from : messages[i].getFrom()) {
							System.out.println("Expéditeur : " + from);
						}
					String s = messages[i].getSubject();
					if (s == null || "".equals(s)) s = "(Sans sujet)";
					System.out.println("Sujet : " + s);
					System.out.println("Date : " + messages[i].getSentDate());
					dlm.addElement(s);
				}
			}
			MsgList.setModel(dlm);
		} catch (NoSuchProviderException ex) {
			System.err.println("Erreur sur provider : " + ex.getMessage());
		} catch (MessagingException ex) {
			System.err.println("Erreur sur message : " + ex.getMessage());
			JOptionPane.showMessageDialog(this, ex.getMessage());
		}
	}

	/**
	 * 
	 */
	private void deleteMessages() {
		if (f != null) {
			try {
				if (protocol.equalsIgnoreCase("pop3")) {
					System.out.println("Pop3 -> close");
					f.close(true);
				} else {
					Message[] expungedMessages = f.expunge();
					System.out.println("Nombre de messages supprimés : " + expungedMessages.length);
				}
			} catch (MessagingException e) {
				System.err.println("Erreur sur message : " + e.getMessage());
			}
		}
	}

	/**
	 * Package-Private
	 */
	void reloadMessages() {
		this.deleteMessages();
		this.loadMessages();
	}
	
	/**
	 * 
	 * @param evt 
	 */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
		String msg = null;
		if ((sender = AddressTF.getText()) == null) 
			msg = "Veuillez entrer une adresse e-mail, SVP.";
		else {
			StringTokenizer st = new StringTokenizer(sender, "@");
			if (st.countTokens() != 2) msg = "Adresse incorrecte";
			else {
				user = st.nextToken();
				host = st.nextToken();
				if ((pwd = PasswordField.getText()) == null)
					msg = "Veuillez entrer un mot de passe, SVP.";
			}
		}
		if (msg != null) JOptionPane.showMessageDialog(AccountFrame, msg);
		else AccountFrame.setVisible(false);
		System.out.println("sender = " + sender + " / user = " + user + " / host = " + host + " / pwd = " + pwd);

		prop.put("mail.smtp.host", host);
		prop.put("mail.pop3.host", host);
		prop.put("mail.imap.host", host);
		System.out.println("Création d'une session de mail");
		sess = Session.getDefaultInstance(prop, null);
		this.loadMessages();
    }//GEN-LAST:event_okButtonActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void AccountMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccountMenuItemActionPerformed
		if (sender != null) AddressTF.setText(sender);
		if (pwd != null) PasswordField.setText(pwd);
		AccountFrame.setVisible(true);
    }//GEN-LAST:event_AccountMenuItemActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		AccountFrame.setLocationRelativeTo(this);
		AccountFrame.setVisible(true);
		rt.start();
    }//GEN-LAST:event_formWindowOpened

	/**
	 * 
	 * @param evt 
	 */
    private void MsgListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_MsgListValueChanged
		//<editor-fold defaultstate="collapsed" desc="reset visual">
		senderLabel.setText("");
		dateLabel.setText("");
		subjectLabel.setText("");
		joinLabel.setText("");
		downloadButton.setEnabled(false);
		//</editor-fold>
		if (MsgList.getSelectedIndex() != -1) {
			Message msg = messages[MsgList.getSelectedIndex()];
			try {
				if (msg.getFrom() != null) senderLabel.setText((msg.getFrom()[0]).toString());
				if (msg.getSentDate() != null) dateLabel.setText((msg.getSentDate()).toString());
				if (msg.getSubject() != null) subjectLabel.setText(msg.getSubject());

				if (msg.isMimeType("text/plain")) {
					if (msg.getContent() != null) TextArea.setText((String) msg.getContent());
					downloadButton.setEnabled(false);
				} else if (msg.isMimeType("multipart/mixed")) {
					downloadButton.setEnabled(true);
					Multipart msgMP = (Multipart) msg.getContent();
					for (int i = 0; i < msgMP.getCount(); i++) {
						Part p = msgMP.getBodyPart(i);
						String d = p.getDisposition();
						if (p.isMimeType("text/plain")) TextArea.setText((String) p.getContent());
						else if (d != null && d.equalsIgnoreCase(Part.ATTACHMENT)) {
							String nf = p.getFileName();
							String j = joinLabel.getText();
							if (!"".equals(j)) j += " - ";
							joinLabel.setText(j + nf);
						}
					}
				} else JOptionPane.showMessageDialog(this, "Le type de ce message n'est pas supporté");
			} catch (NoSuchProviderException e) {
				System.err.println("Erreur sur provider : " + e.getMessage());
			} catch (MessagingException ex) {
				System.err.println("Erreur sur message : " + ex.getMessage());
			} catch (IOException ex) {
				System.err.println("Erreur IO : " + ex.getMessage());
			}
		}
    }//GEN-LAST:event_MsgListValueChanged

	/**
	 * 
	 * @param evt 
	 */
    private void pop3RadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pop3RadioButtonMenuItemActionPerformed
		if (pop3RadioButtonMenuItem.isSelected()) protocol = "pop3";
    }//GEN-LAST:event_pop3RadioButtonMenuItemActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void imapRadioButtonMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imapRadioButtonMenuItemActionPerformed
		if (imapRadioButtonMenuItem.isSelected()) protocol = "imap";
    }//GEN-LAST:event_imapRadioButtonMenuItemActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		rt.interrupt();
		this.deleteMessages();
		try {
			store.close();
		} catch (MessagingException ex) {
			System.err.println("Erreur sur message : " + ex.getMessage());
		}
    }//GEN-LAST:event_formWindowClosing

	/**
	 * 
	 * @param evt 
	 */
    private void reloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadButtonActionPerformed
		this.deleteMessages();
		this.loadMessages();
    }//GEN-LAST:event_reloadButtonActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void attachButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachButtonActionPerformed
		JFileChooser fileChooser = new JFileChooser(prop.getProperty("user.directory"));
		fileChooser.setMultiSelectionEnabled(true);
		if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			selectedFiles = fileChooser.getSelectedFiles();
			if (selectedFiles.length > 0) {
				String names = "";
				for (File selectedFile : selectedFiles) {
					names += selectedFile.getName() + " - ";
				}
				attachNameLabel.setText(names);
			}
		}
    }//GEN-LAST:event_attachButtonActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
		try {
			int selectedIndex = MsgList.getSelectedIndex();
			if (selectedIndex != -1) {
				messages[selectedIndex].setFlag(Flags.Flag.DELETED, true);
				System.out.println("DELETE flag set");
				((DefaultListModel) MsgList.getModel()).remove(selectedIndex);
				System.out.println("Message retiré de la liste");
				nbMsg--;
			}
		} catch (MessagingException ex) {
			System.err.println("Erreur sur message : " + ex.getMessage());
		}
    }//GEN-LAST:event_deleteButtonActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		fileChooser.setAcceptAllFileFilterUsed(false);
		if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File selectedDirectory = fileChooser.getSelectedFile();
			System.out.println(selectedDirectory);
			Message msg = messages[MsgList.getSelectedIndex()];
			Multipart msgMP;
			try {
				msgMP = (Multipart) msg.getContent();
				for (int i = 0; i < msgMP.getCount(); i++) {
					Part p = msgMP.getBodyPart(i);
					String d = p.getDisposition();
					if (d != null && d.equalsIgnoreCase(Part.ATTACHMENT)) {
						InputStream is = p.getInputStream();
						ByteArrayOutputStream baos = new ByteArrayOutputStream();
						int c;
						while ((c = is.read()) != -1) {
							baos.write(c);
						}
						baos.flush();
						String nf = p.getFileName();
						String path = selectedDirectory + System.getProperty("file.separator") + nf;
						try (FileOutputStream fos = new FileOutputStream(path)) {
							baos.writeTo(fos);
						}
						System.out.println("Piece attachée " + nf + " récupérée");
					}
				}
			} catch (IOException ex) {
				System.err.println("Erreur IO : " + ex.getMessage());
			} catch (MessagingException ex) {
				System.err.println("Erreur sur message : " + ex.getMessage());
			}
		}
    }//GEN-LAST:event_downloadButtonActionPerformed

	/**
	 * 
	 * @param evt 
	 */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
		boolean send = false;
		String info = null;
		if ((dest = rcptTF.getText()) == null) info = "Veuillez entrer un destinataire, SVP";
		else if (!dest.matches(".+@.+")) info = "L'adresse encodée n'est pas correcte";
		else {
			sujet = sujetTF.getText();
			if ("".equals(sujet)) {
				int confirmNoSubject = JOptionPane.showConfirmDialog(this, "Vous allez envoyer un message sans sujet.\nEtes-vous sur ?",
					"Message sans sujet", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
				if (confirmNoSubject == JOptionPane.YES_OPTION) send = true;
			} else send = true;
		}
		if (send) {
			contenu = contentTextArea.getText();
			if ("".equals(contenu) && selectedFiles == null) {
				int confirmNoContent = JOptionPane.showConfirmDialog(this, "Vous allez envoyer un message sans contenu.\nEtes-vous sur ?",
					"Message sans contenu", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
				if (confirmNoContent == JOptionPane.CANCEL_OPTION) send = false;
			}
			if (send) {
				System.out.println("Création du message");
				try {
					MimeMessage mm = new MimeMessage(sess);
					mm.setFrom(new InternetAddress(sender));
					mm.setRecipient(Message.RecipientType.TO, new InternetAddress(dest));
					mm.setSubject(sujet);
					if (selectedFiles == null) mm.setText(contenu); //Envoi simple part
					else { //Envoi multipart
						System.out.println("Debut construction du multipart");
						Multipart msgMP = new MimeMultipart();
						//1 : le texte
						MimeBodyPart mbp = new MimeBodyPart();
						mbp.setText(contenu);
						msgMP.addBodyPart(mbp);
						//2 : les fichiers joints
						DataSource ds;
						String nf;
						for (File selectedFile : selectedFiles) {
							nf = selectedFile.getName();
							mbp = new MimeBodyPart();
							ds = new FileDataSource(selectedFile.getAbsolutePath());
							mbp.setDataHandler(new DataHandler(ds));
							mbp.setFileName(nf);
							msgMP.addBodyPart(mbp);
						}
						mm.setContent(msgMP);
					}
					System.out.println("Envoi du message");
					Transport.send(mm);
					System.out.println("Message envoyé");
				} catch (AddressException e) {
					System.err.println("Erreur d'adresse : " + e.getMessage());
				} catch (MessagingException ex) {
					System.err.println("Erreur sur message : " + ex.getMessage());
					JOptionPane.showMessageDialog(this, ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
				}
				//<editor-fold defaultstate="collapsed" desc="reset visual">
				dest = null;
				rcptTF.setText("");
				sujet = null;
				sujetTF.setText("");
				selectedFiles = null;
				attachNameLabel.setText("");
				contenu = null;
				contentTextArea.setText("");
				//</editor-fold>
			}
		} else JOptionPane.showMessageDialog(this, info, "Erreur", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_sendButtonActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ApplicationEMailForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ApplicationEMailForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ApplicationEMailForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ApplicationEMailForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				ApplicationEMailForm amf = new ApplicationEMailForm();
				amf.setLocationRelativeTo(null);
				amf.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame AccountFrame;
    private javax.swing.JMenuItem AccountMenuItem;
    private javax.swing.JTextField AddressTF;
    private javax.swing.JPanel InboxPanel;
    private javax.swing.JTabbedPane MainTabbedPane;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JList<String> MsgList;
    private javax.swing.JPanel NewMsgPanel;
    private javax.swing.JPasswordField PasswordField;
    private javax.swing.JMenu ProtocolMenu;
    private javax.swing.JScrollPane ScrollPane;
    private javax.swing.JMenu SettingsMenu;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel attLabel;
    private javax.swing.JButton attachButton;
    private javax.swing.JLabel attachLabel;
    private javax.swing.JLabel attachNameLabel;
    private javax.swing.JLabel chooseLabel;
    private javax.swing.JLabel contentLabel;
    private javax.swing.JTextArea contentTextArea;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel deLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton downloadButton;
    private javax.swing.JRadioButtonMenuItem imapRadioButtonMenuItem;
    private javax.swing.JLabel joinLabel;
    private javax.swing.JLabel leLabel;
    private javax.swing.JScrollPane listScrollPane;
    private javax.swing.ButtonGroup menuButtonGroup;
    private javax.swing.JLabel newMsgLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButtonMenuItem pop3RadioButtonMenuItem;
    private javax.swing.JLabel pwdLabel;
    private javax.swing.JLabel rcptLabel;
    private javax.swing.JTextField rcptTF;
    private javax.swing.JPanel readMsgPanel;
    private javax.swing.JButton reloadButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JLabel senderLabel;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JLabel sujetLabel;
    private javax.swing.JLabel sujetLabel2;
    private javax.swing.JTextField sujetTF;
    private javax.swing.JScrollPane taScrollPane;
    // End of variables declaration//GEN-END:variables

}
