package requestresponse.multithread.abstracts;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.Properties;
import requestresponse.multithread.BasicLoginDialog;
import requestresponse.multithread.BasicRequest;
import requestresponse.multithread.interfaces.Request;
import requestresponse.multithread.interfaces.Response;

/**
 *
 * @author Morgan
 */
public abstract class AbstractApplicationForm extends javax.swing.JFrame {

	//<editor-fold defaultstate="collapsed" desc="Variables">
	//Network variables
	protected Socket clientSocket = null;
	private String ipAddress;
	private int port;
	protected ObjectInputStream ois = null;
	protected ObjectOutputStream oos = null;
	//Application variables
	protected Properties properties = new Properties();
	protected BasicLoginDialog bld;
	protected String userCertificate;
	//</editor-fold>

	/**
	 * Creates new form AbstractApplicationForm.
	 *
	 * @param propertiesFileName : the name of the Properties file to read for
	 *                           the host & port
	 */
	public AbstractApplicationForm(String propertiesFileName) {
		initComponents();
		//Sets the HOST & PORT
		try {
			properties.load(new FileInputStream(System.getProperty("user.dir")
				+ System.getProperty("file.separator") + propertiesFileName));
			ipAddress = properties.getProperty("HOST");
			port = Integer.parseInt(properties.getProperty("PORT"));
		} catch (IOException | NumberFormatException e) {
			System.err.println("Property file error : " + e.getMessage());
		}
		//Connection to the server
		try {
			clientSocket = new Socket(ipAddress, port);
			System.out.println("Remote : " + clientSocket.getRemoteSocketAddress()
				+ " | local : " + clientSocket.getLocalSocketAddress());
			oos = new ObjectOutputStream(clientSocket.getOutputStream());
		} catch (IOException e) {
			System.err.println("Connection error : " + e.getMessage());
			System.exit(1);
		}
	}

	/**
	 *
	 * @param propertiesFileName
	 * @param basicLogin
	 */
	public AbstractApplicationForm(String propertiesFileName, boolean basicLogin) {
		this(propertiesFileName);
		if (basicLogin) {
			//Shows login form
			bld = new BasicLoginDialog(this, true);
			bld.setLocationRelativeTo(null);
			bld.setVisible(true);
			if (!bld.isLoginOK()) System.exit(1);
		}
	}

	/**
	 *
	 * @param userCertificate
	 */
	public void setUserCertificate(String userCertificate) {
		this.userCertificate = userCertificate;
	}

	/**
	 * Sends a Request to the server and returns the Response received.
	 *
	 * @param req : An object implementing Request
	 *
	 * @return An object implementing Response
	 */
	public Response connectToServer(Request req) {
		//Send request
		try {
			oos.writeObject(req);
			oos.flush();
		} catch (IOException e) {
			System.err.println("Send error [connectToServer] : " + e.getMessage());
			return null;
		}
		//Read response
		Response res = null;
		try {
			ois = new ObjectInputStream(clientSocket.getInputStream());
			res = (Response) ois.readObject();
			if (res != null) System.out.println("Response : " + res.getCode());
			else System.out.println("Response is null");
		} catch (IOException e) {
			System.err.println("Receive error [connectToServer] - IOException : " + e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println("Receive error [connectToServer] - ClassNotFoundException : " + e.getMessage());
		}
		return res;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * Send LOGOUT request to server when the main application window closes.
	 *
	 * @param evt : the event that trigger the call
	 */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		sendLogout();
    }//GEN-LAST:event_formWindowClosing

	/**
	 * Sends a Request of type LOGOUT to the server then closes the Socket.
	 */
	protected void sendLogout() {
		connectToServer(new BasicRequest(BasicRequest.LOGOUT, ""));
		try {
			clientSocket.close();
			System.exit(0);
		} catch (IOException ex) {
			System.err.println("Error on LOGOUT : " + ex.getMessage());
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
