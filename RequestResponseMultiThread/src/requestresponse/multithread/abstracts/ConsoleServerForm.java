package requestresponse.multithread.abstracts;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import requestresponse.multithread.interfaces.ConsoleServer;

/**
 * @author Morgan
 */
public abstract class ConsoleServerForm extends javax.swing.JFrame implements ConsoleServer {

	//Variables
	private String propertiesFileName;
	protected Properties properties = new Properties();

	/**
	 * Creates new form ConsoleServerForm.
	 */
	public ConsoleServerForm() {
		initComponents();
		TraceEvents("server#init()#main");
	}

	/**
	 * Creates new form ConsoleServerForm.
	 *
	 * @param title : window title
	 */
	public ConsoleServerForm(String title) {
		initComponents();
		this.setTitle(title);
		TraceEvents("server#init()#main");
	}

	/**
	 * Sets the name of the property file that will be read from
	 *
	 * @param fileName
	 */
	protected void setPropertiesFileName(String fileName) {
		this.propertiesFileName = fileName;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverLabel = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jSeparator = new javax.swing.JSeparator();
        clientLabel = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        serverLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        serverLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        serverLabel.setText("Server");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setEnabled(false);
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        clientLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        clientLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientLabel.setText("Log");

        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origine", "Requête", "Thread"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane.setViewportView(clientsTable);
        if (clientsTable.getColumnModel().getColumnCount() > 0) {
            clientsTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            clientsTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            clientsTable.getColumnModel().getColumn(2).setPreferredWidth(30);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(serverLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(serverLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clientLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 *
	 * @param evt
	 */
    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
		serverStop();

		startButton.setEnabled(true);
		stopButton.setEnabled(false);
    }//GEN-LAST:event_stopButtonActionPerformed

	/**
	 *
	 */
	protected abstract void serverStop();

	/**
	 *
	 * @param evt
	 */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
		try {
			properties.load(new FileInputStream(System.getProperty("user.dir")
				+ System.getProperty("file.separator") + propertiesFileName));

			serverStart();

			startButton.setEnabled(false);
			stopButton.setEnabled(true);
		} catch (FileNotFoundException e) {
			System.err.println("Fichier properties non trouvé : " + e.getMessage());
		} catch (IOException e) {
			System.err.println("startButtonActionPerformed - Erreur d'IO : " + e.getMessage());
		}
    }//GEN-LAST:event_startButtonActionPerformed

	/**
	 *
	 * @param evt
	 */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
		((DefaultTableModel) clientsTable.getModel()).setRowCount(0);
    }//GEN-LAST:event_clearButtonActionPerformed

	/**
	 *
	 */
	protected abstract void serverStart();

	/**
	 *
	 * @param comment
	 */
	@Override
	public final void TraceEvents(String comment) {
		Vector line = new Vector();
		StringTokenizer parser = new StringTokenizer(comment, "#");
		while (parser.hasMoreTokens()) {
			line.add(parser.nextToken());
		}
		DefaultTableModel dtm = (DefaultTableModel) clientsTable.getModel();
		dtm.insertRow(dtm.getRowCount(), line);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel clientLabel;
    private javax.swing.JTable clientsTable;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JLabel serverLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
