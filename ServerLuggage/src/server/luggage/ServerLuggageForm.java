package server.luggage;

import requestresponse.multithread.abstracts.ConsoleServerForm;
import server.multithread.abstracts.ThreadServer;
import server.multithread.abstracts.ThreadServerMultiClient;
import server.multithread.extend.ThreadServerMultiConnection;
import server.multithread.extend.ThreadServerMultiConnectionC;
import server.multithread.impl.ListTasks;

/**
 * A class that extends ConsoleServerForm
 *
 * @author Morgan
 */
public class ServerLuggageForm extends ConsoleServerForm {

	private int port_luggage, port_checkin;
	private ThreadServer ts_luggage, ts_checkin;

	/**
	 * Creates new form ServerLuggageForm.
	 * The properties file name is "serverluggage.properties" and is in the current folder.
	 */
	public ServerLuggageForm() {
		super("Serveur Baggages");
		super.setPropertiesFileName("serverluggage.properties");
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ServerLuggageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ServerLuggageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ServerLuggageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ServerLuggageForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				ServerLuggageForm slf = new ServerLuggageForm();
				slf.setLocationRelativeTo(null);
				slf.setVisible(true);
			}
		});
	}

	/**
	 * Sets the ports that this server listens to. Creates and starts an
	 * extension of server.multithread.ThreadServer for each port depending on
	 * the type of client expected.
	 */
	@Override
	protected void serverStart() {
		port_luggage = Integer.parseInt(properties.getProperty("PORT_LUGGAGE"));
		port_checkin = Integer.parseInt(properties.getProperty("PORT_CHECKIN"));

		ts_luggage = new ThreadServerMultiConnection("Luggage", port_luggage, this, new ListTasks());
		ts_luggage.start();
		TraceEvents("server#start luggage#main");

		ts_checkin = new ThreadServerMultiConnectionC("Check-In", port_checkin, this, new ListTasks());
		ts_checkin.start();
		TraceEvents("server#start check-in#main");
	}

	/**
	 * Calls the doStop() method of every ThreadServer created.
	 */
	@Override
	protected void serverStop() {
		if (ts_luggage.isAlive()) {
			ts_luggage.doStop();
			TraceEvents("server#stop luggage#main");
		}
		if (ts_checkin.isAlive()) {
			ts_checkin.doStop();
			TraceEvents("server#stop check-in#main");
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
